#include <nds.h>
#include "gl2d.h"
#include "sound.h"
#include "tonccpy.h"

#include "graphics/graphics.h"
#include "graphics/fontHandler.h"

#include "level.h"
#include "logo_title.h"
#include "logo_bottom.h"

extern int language;

extern bool wideScreen;
extern bool fadeType;
extern bool fadeSpeed;
extern int screenMode;

static bool inited = false;
static bool musicPlaying = false;
static int delayBeforeContinue = 0;
static int modeTimer = 0;
static int runnerMoveSpeed = 13;
static bool runnerMoveSpeedDelay = false;
static int runnerXpos = 256;
//static int runnerXpos = 84;

//static float bgYpos = 0.0;

static touchPosition touch;

static int titleTexID;
static int bottomLogosTexID;

static glImage titleImage[(256 / 64) * (256 / 64)];
static glImage bottomLogosImage[(256 / 32) * (32 / 32)];

extern void playSndSelect(void);
extern void playSndBeepEcho(void);

void menuGraphicLoad(void) {
	titleTexID = glLoadTileSet(titleImage, // pointer to glImage array
							64, // sprite width
							64, // sprite height
							256, // bitmap width
							256, // bitmap height
							GL_RGB16, // texture type for glTexImage2D() in videoGL.h
							TEXTURE_SIZE_256, // sizeX for glTexImage2D() in videoGL.h
							TEXTURE_SIZE_256, // sizeY for glTexImage2D() in videoGL.h
							TEXGEN_OFF | GL_TEXTURE_COLOR0_TRANSPARENT, // param for glTexImage2D() in videoGL.h
							16, // Length of the palette to use (16 colors)
							(u16*) logo_titlePal, // Load our 16 color tiles palette
							(u8*) logo_titleBitmap // image data generated by GRIT
							);
	bottomLogosTexID = glLoadTileSet(bottomLogosImage, // pointer to glImage array
							256, // sprite width
							32, // sprite height
							256, // bitmap width
							32, // bitmap height
							GL_RGB16, // texture type for glTexImage2D() in videoGL.h
							TEXTURE_SIZE_256, // sizeX for glTexImage2D() in videoGL.h
							TEXTURE_SIZE_32, // sizeY for glTexImage2D() in videoGL.h
							TEXGEN_OFF | GL_TEXTURE_COLOR0_TRANSPARENT, // param for glTexImage2D() in videoGL.h
							16, // Length of the palette to use (16 colors)
							(u16*) logo_bottomPal, // Load our 16 color tiles palette
							(u8*) logo_bottomBitmap // image data generated by GRIT
							);
}

void menuGraphicUnload(void) {
	glDeleteTextures(1, &titleTexID);
	glDeleteTextures(1, &bottomLogosTexID);
}

void menuScreen(void) {
	if (!inited) {
		menuGraphicLoad();
		musicPlaying = false;
		delayBeforeContinue = 0;
		modeTimer = 0;
		runnerMoveSpeed = 13;
		runnerMoveSpeedDelay = false;
		runnerXpos = 256;

		fadeSpeed = false;
		fadeType = true;
		inited = true;
		snd().loadStream("nitro:/Title_BGM.raw", 32728, true);
	}

	//printLargeCentered(false, 96, "Press START to play");

	touchRead(&touch);
	scanKeys();
	int pressed = keysDown();
	
	if (screenFadedIn() && ((pressed & KEY_START) || (pressed & KEY_TOUCH)) && delayBeforeContinue == 0) {
		snd().playSelect();
		if (!musicPlaying) {
			snd().beginStream();
			musicPlaying = true;
		} else {
			delayBeforeContinue++;
		}
	}

	if (delayBeforeContinue > 0) {
		delayBeforeContinue++;
	}

	if (delayBeforeContinue == 60) {
		fadeType = false;
		snd().fadeOutStream();
		while (!screenFadedOut());
		snd().stopStream();
		menuGraphicUnload();
		screenMode = 2;
		inited = false;
	}

	if (screenFadedIn()) {
		if ((modeTimer == 0 || modeTimer == 60 || modeTimer == 60*2) && !musicPlaying) {
			snd().playBeepEcho();
		}

		modeTimer++;
		if (modeTimer > 60*4) {
			modeTimer = 60*4;
		}
	}

	if (modeTimer > 60*3) {
		if (!musicPlaying) {
			snd().beginStream();
			musicPlaying = true;
		}
		runnerXpos -= runnerMoveSpeed;
		if (runnerXpos < 84) runnerXpos = 84;
		if (!runnerMoveSpeedDelay) {
			runnerMoveSpeed -= 1;
			if (runnerMoveSpeed < 1) runnerMoveSpeed = 1;
		}
		runnerMoveSpeedDelay = !runnerMoveSpeedDelay;
	}
}

void renderMenuTop(void) {
	glBoxFilled(0, 0, (wideScreen ? 308 : 256), 192, RGB15(31, 31, 31));
	// Left side
	glSprite((wideScreen ? 24 : 0)+10, 10, GL_FLIP_NONE, &titleImage[0]);
	glSprite((wideScreen ? 24 : 0)+10, 10+64, GL_FLIP_NONE, &titleImage[4]);
	glSprite((wideScreen ? 24 : 0)+10, 10+(64*2), GL_FLIP_NONE, &titleImage[8]);
	int boxUpperHeight = 6;
	if (modeTimer > 60*2) {
		boxUpperHeight = 6+(64*3);
	} else if (modeTimer > 60) {
		boxUpperHeight = 6+(64*2);
	} else if (modeTimer > 0) {
		boxUpperHeight = 6+64;
	}
	glBoxFilled((wideScreen ? 24 : 0)+10, boxUpperHeight, (wideScreen ? 24 : 0)+10+64, 192, RGB15(31, 31, 31));

	if (modeTimer > 60*3) {
		// Right side
		glSprite((wideScreen ? 24 : 0)+runnerXpos, 18, GL_FLIP_NONE, &titleImage[1]);
		glSprite((wideScreen ? 24 : 0)+runnerXpos+64, 18, GL_FLIP_NONE, &titleImage[2]);
		glSprite((wideScreen ? 24 : 0)+runnerXpos+(64*2), 18, GL_FLIP_NONE, &titleImage[3]);
		glSprite((wideScreen ? 24 : 0)+runnerXpos, 18+64, GL_FLIP_NONE, &titleImage[5]);
		glSprite((wideScreen ? 24 : 0)+runnerXpos+64, 18+64, GL_FLIP_NONE, &titleImage[6]);
		glSprite((wideScreen ? 24 : 0)+runnerXpos+(64*2), 18+64, GL_FLIP_NONE, &titleImage[7]);
		glSprite((wideScreen ? 24 : 0)+runnerXpos, 18+(64*2), GL_FLIP_NONE, &titleImage[9]);
		glSprite((wideScreen ? 24 : 0)+runnerXpos+64, 18+(64*2), GL_FLIP_NONE, &titleImage[10]);
		glSprite((wideScreen ? 24 : 0)+runnerXpos+(64*2), 18+(64*2), GL_FLIP_NONE, &titleImage[11]);
	}

	//bgYpos -= 0.5;
	//if (bgYpos < -8.5) bgYpos = 0;
	//bgScroll(bg3, 0, bgYpos);
}

void renderMenuBottom(void) {
	/*for (int x = 0; x < (wideScreen ? 20 : 16); x++) {
		for (int y = 0; y < 13; y++) {
			glSprite((x*16), (y*16)+bgYpos, GL_FLIP_NONE, &tileImage[1]);
		}
	}*/
	glBoxFilled(0, 0, 256, 192, RGB15(31, 31, 31));
	glSprite(0, 192-32, GL_FLIP_NONE, bottomLogosImage);
	//glSprite(4, 4, GL_FLIP_NONE, titleImage[1]);

	//bgYpos -= 0.5;
	//if (bgYpos < -8.5) bgYpos = 0;
	//bgScroll(bg3, 0, bgYpos);
}
